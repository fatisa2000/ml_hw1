# -*- coding: utf-8 -*-
"""IML_CWH1_Q2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vTPypa8jlmDYDzT-0xPJLT016l0ZYxSU

<h1 align="center">An Introduction to Machine Learning - 25737</h1>
<h4 align="center">Dr. Sajjad Amini</h4>
<h4 align="center">Sharif University of Technology, Spring 2023</h4>

# Problem Set 02

Welcome to your second assignment. This exercise gives you a brief introduction to Python.

STUDENT NAME: fateme salehin

STUDENT ID:97101961

## Import 
>Put all of your imports for this file in the below cell.
"""

### START CODE HERE ###
import numpy as np
import pandas as pd
import csv
import matplotlib.pyplot as plt
### END CODE HERE ###

"""# Question 1

## Array creation
>Create the followings to numpy array:
* A: a 3\*3 array like this:
$$
A = \left(\begin{array}{cc} 
10 & 20 & 30\\
5 & 10 & 15\\
1 & 5 & 8
\end{array}\right)
$$ 
* B: a 3\*3\*4 that filled with the numbers start from 15 and have steps of 5 to the end. The array should be filled first along the first dimension then the second dimension and at last the third dimension. like this:
$$
B[:, :, 0] = \left(\begin{array}{cc} 
15 & 30 & 45\\
20 & 35 & 50\\
25 & 40 & 55
\end{array}\right)
$$
"""

### START CODE HERE ###
a=np.array([[10,20,30],[5,10,15],[1,5,8]])
print(a)
arr2=np.zeros((36,1))
for i in range(36):
  arr2[i]=i*5+15
print(arr2)
arr3=np.reshape(arr2,(4,3,3))
b=np.transpose(arr3,(0,2,1))
print(b)

### END CODE HERE ###

"""## Replacement
>Replace the last slice of array B (B[:, :, 3]) with values of A. Then print the result.
"""

### START CODE HERE ###
b1=np.copy(b)
b1[3,:,:]=a
print(b1)
### END CODE HERE ###

"""## Axis Swap 
>Swap the first(B[:, :, 0]) and last(B[:, :, 3]) slice of the array B **only with one line of code**. Then print the result.
"""

### START CODE HERE ###
print(b)
b[0,:,:],b[3,:,:]=b[3,:,:],b[0,:,:].copy()
print(b)
### END CODE HERE ###

"""## Transposing 
>Transpose the array B elements in each slice. Then print the result.
"""

### START CODE HERE ###
print(b)
for i in range(4):
  b[i,:,:]=np.transpose(b[i,:,:])
print(b)


### END CODE HERE ###

"""## Matrix Multiplication
>Calculate the matrix multiplication of all slices of the array B. 
(B[:, :, 0] \* B[:, :, 1] \* B[:, :, 2] \* B[:, :, 3]). Then print the result.

>**Note**: the result should be a 3\*3 array. 
"""

### START CODE HERE ###
c1=np.matmul(b[0,:,:],b[1,:,:])
c2=np.matmul(c1,b[2,:,:])
c3=np.matmul(c2,b[3,:,:])
print(c3)

### END CODE HERE ###

"""## Determinant
>Calculate the determinant of the array A and print it.
"""

### START CODE HERE ###
d=np.linalg.det(a)
print(d)
### END CODE HERE ###

"""# Question 2

## Loading dataset
>Load the IMDB-Movie-Data.csv file into a pandas dataframe and show its first 5 rows. Each row of this dataframe corresponds to one film.
"""

### START CODE HERE ###
f=pd.read_csv(r"C:\Users\Iran_soft\Desktop\mk\uni_march\IMDB-Movie-Data.csv")
print(f.head())
#print(f)
### END CODE HERE ###

"""## Actors/Actresses Activity
>For each Actors/Actresses caculate the number of movies in the dataframe, then sort the actors/actresses first by their number of movies in descending order and then by their name in ascending order. 
"""

### START CODE HERE ###
dict1={}
row=[]
row1=[]
row2=[]
res=[]
for i in range(1000):
    row=f['Actors']
for i in range(1000):
    res.append(list(map(str.strip,row[i].split(','))))
for i in range(1000):
    j=len(res[i])
    for k in range(j):
        dict1[res[i][k]]=0 
for i in range(1000):
    j=len(res[i])
    for k in range(j):
        dict1[res[i][k]]=dict1[res[i][k]]+1
li1=list(dict1.items())
def func1(e):
    return e[1]
li1.sort(key=func1)
print(li1)
li1.sort()
print(li1)
    
### END CODE HERE ###

"""## Score Histogram
>Draw the histogram of metascores and ratings. 
"""

### START CODE HERE ###
for i in range(1000):
    row1=f['Metascore']
    row2=f['Rating']
plt.subplot(2,1,1)
plt.hist(row1,bins=45)
plt.title("histogram of metascores")
plt.subplot(2,1,2)
plt.hist(row2,bins=45)
plt.title("histogram of ratings")
plt.show()
### END CODE HERE ###

"""## Correlations
>Calculate the correlation between rating, votes and metascore of the movies.
Is there any meaningful relation between these features? 
"""

### START CODE HERE ###
row3=f['Votes']

cor1=row1.corr(row2)
print('correlation between metascore and rating',cor1)
cor2=row1.corr(row3)
print('correlation between metascore and voting',cor2)
cor3=row2.corr(row3)
print('correlation between voting and rating',cor3)
#it shows that relation between metascore and rating strongest after that ,relation between voting and rating is approximately strong.
#and relation between metascore and voting is approximately weak
### END CODE HERE ###

"""# Question 3

## File
> Craet a .txt file and name it "Name_actors". You must write the name of all actors/actresses in the IMDB-Movie-Data.csv file. Don't write a name multiple time and write each name in a new line.
"""

### START CODE HERE ###

with open('Name_actors','w') as fa:
    
      for line in dict1:
         fa.write(line)
         fa.write('\n')
fa.close()
f1=open('Name_actors','r')
print(f1.read())
f1.close()
### END CODE HERE ###

"""# Question 4

## Plot
>You must plot the number of movies in each year according to the IMDB-Movie-Data.csv file. X-axis is year and y-axis show the number of movies in each year.
> set the x_label, y_label and title for your plot.
"""

### START CODE HERE ###
row4=f['Year']
dict2={}
x=[]
y=[]
for i in range(1000):
        dict2[row4[i]]=0 
for i in range(1000):
       dict2[row4[i]]=dict2[row4[i]]+1
li2=list(dict2.items())
li2.sort()
m=len(li2)
for i in range(m):
    x.append(li2[i][0])
    y.append(li2[i][1])
plt.plot(x,y)
plt.title("the number of movies in each year")
plt.xlabel('year')
plt.ylabel('number')
plt.show()
### END CODE HERE ###

"""## Plot
>You must plot the cos(x) curve. plot 20 cycle of the curve. the frequency of first half of curve is 50 Hz and frequency of second lalf is 200 Hz. 
> set the x_label, y_label and title for your plot.
"""

### START CODE HERE ###
t=0.2
t1=0.25
f=50
f1=200
ts=0.001
ts1=0.0005
tr=np.arange(0,t,ts)
tr1=np.arange(t,t1,ts1)
y1=np.cos(2*np.pi*f*tr)
y2=np.cos(2*np.pi*f1*tr1)
plt.plot(tr,y1)
plt.plot(tr1,y2)
plt.title("cos(t) curve")
plt.xlabel('t')
plt.ylabel('cos(t)')
### END CODE HERE ###